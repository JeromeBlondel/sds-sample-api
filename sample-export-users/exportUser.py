import requests
import csv
import json
import argparse
import paginationHelper as paginationHelper
import userModel as model
requests.packages.urllib3.disable_warnings()

def execRequest(csvwriter, url, token, exposedData):
    """Use sdmc external Api rest to recover user data
    Input:
      csvwriter: csv writer object responsible for converting data into delimited strings
      url: sdmc url.
      token: authentification on sdmc server
      exposedData: data you want to export in csv file .
    return : url next page if there is one else None
    """
    response = requests.get(url, headers={'Authorization': token, 'Content-Type': 'application/json'},verify=False)

    if response.status_code != 200:
        # This means something went wrong.
        raise Exception('An error occured! -> code: {} - message: {}'.format(response.status_code, response.json()['error']))

    # write received data
    for elt in response.json():
        csvwriter.writerow(model.UserData(elt).toCsv(exposedData))

    # next pages if exists
    nextUrl = paginationHelper.getNextPageUrl(response, url)

    return nextUrl

def getConfig():
    """Read config file
    Config file is required and must contains :
      token: generated by sdmc admin. It is required.
      serverUrl: sdmc url.
      exposedData: data you want to export in csv file .
    return : json containing configuration informations
    """
    parser = argparse.ArgumentParser(description='Add configuration information.')
    parser.add_argument( '--config', dest='configFile', type=argparse.FileType('r'), help='the file containing the json config data', required=True)
    args = parser.parse_args()

    # read config
    config = json.load(args.configFile)
    if(config.get('token') == None ):
        raise Exception('An error occured! -> you have to define token in configuration file')

    configData = {}
    configData['token'] = config['token']
    configData['serverUrl'] = "https://sds.stormshieldcs.eu/" if (config.get('serverUrl') == None) else config['serverUrl']
    configData['exposedData'] = model.UserData.getAttributeName() if (config.get('exposedData') == None) else config['exposedData']
    return configData

def getAllUsers():
    """Get all User defined in sdmc
    This function:
      reads configuration
      recovers users page by page (use sdmc external api)
      writes csv file with data received. Csv contains selected columns if you define your choice in config file else all columns
    return: empty
    """
    # read config file
    configData = getConfig()

    try:
        # open a file for writing
        userData = open('./UserData.csv', 'w', encoding='utf-8')
        # create the csv writer object
        csvwriter = csv.writer(userData, delimiter=';')
        # write header with selected columns
        csvwriter.writerow(configData['exposedData'])
        # execute all requests
        nextUrl = configData['serverUrl']+ 'api/v1/users?page=1'
        while (nextUrl != None):
            nextUrl = execRequest(csvwriter, nextUrl, configData['token'], configData['exposedData'])
        # file is generated
        print("UserData.csv has been successfully generated!")
    finally:
        userData.close()

getAllUsers()
