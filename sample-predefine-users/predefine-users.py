import json
import requests
import csv
import argparse

numberUsersPerRequests=100

#####################
######Functions######
#####################
def predefineUsers():
    """Pre-defined users specified in a CSV file
    This function:
        reads configuration
        pre-defined users based on csv content
    return: empty
    """
    # read config file
    configData = getConfig()
    try:
        users=[]
        # open a file for reading
        with open(configData['inputCSVFile'].name, newline='\n', encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile, delimiter=";")
            # Read CSV content
            for row in reader:
                users.append({"email":row['email'],"state":"Predefined"})
                if(len(users) > numberUsersPerRequests):
                    postJsonData(configData['token'], configData['serverUrl']+'/api/v1/users', {"users":users})
                    users.clear()
            if(len(users) > 0):
                postJsonData(configData['token'], configData['serverUrl']+'/api/v1/users', {"users":users})
                users.clear()
    except Exception as e:
        print(e)
    finally:
        if(csvfile):
            csvfile.close()
        print("Operation done")

def postJsonData(token, url, body):
    """Send JSON data
    This function:
        send a POST resquest with JSON body
    return: empty
    """
    headers={'Authorization': token, 'Content-Type': 'application/json'}
    response = requests.post(url,json=body, headers=headers)
    print("Response code: {}: {}".format(response.status_code, response.text))

def getConfig():
    """Read config file
    Config file is required and must contains :
        token: generated by sdmc admin. It is required.
        serverUrl: sdmc url.
    return : json containing configuration informations
    """
    parser = argparse.ArgumentParser(description='Add configuration information & inputs data.')
    parser.add_argument( '--config', dest='configFile', type=argparse.FileType('r'), help='the file containing the json config data', required=True)
    parser.add_argument( '--input', dest='inputCSVFile', type=argparse.FileType('r'), help='the file containing the users to be predefined', required=True)
    args = parser.parse_args()

    # read config
    config = json.load(args.configFile)
    if(config.get('token') == None ):
        raise Exception('An error occured! -> you have to define token in configuration file')

    configData = {}
    configData['token'] = config['token']
    configData['serverUrl'] = "https://sds.stormshieldcs.eu/" if (config.get('serverUrl') == None) else config['serverUrl']
    configData['inputCSVFile'] = args.inputCSVFile
    return configData


#####################
######   Main  ######
#####################
predefineUsers()
